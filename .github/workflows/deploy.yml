name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  EC2_HOST: 13.211.169.169
  EC2_USER: ubuntu
  DEPLOY_PATH: /home/ubuntu/smart-yoram-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key-for-ci
      run: |
        # Run pytest if tests exist
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Check code formatting
      run: |
        # Check if black is installed and run it
        if pip show black > /dev/null 2>&1; then
          black --check app/
        else
          echo "Black not installed, skipping format check"
        fi

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    environment: production  # GitHub Environment 사용
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        # Pass entire .env file content from secrets
        ENV_FILE: ${{ secrets.ENV_FILE }}
      run: |
        # Setup SSH key
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create .ssh directory if it doesn't exist
        mkdir -p ~/.ssh
        
        # Add host to known_hosts to avoid interactive prompt
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Copy files to EC2
        rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='.env' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='venv' \
          --exclude='private_key.pem' \
          ./ ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.DEPLOY_PATH }}/
        
        # Write ENV_FILE content to a temporary file
        echo "${{ secrets.ENV_FILE }}" > env_temp.txt
        
        # Check if file has content
        if [ -s env_temp.txt ]; then
          # Copy the env file to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no env_temp.txt ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/ubuntu/smart-yoram-backend/.env
          
          # Remove temporary file
          rm -f env_temp.txt
          
          echo "✅ .env file successfully transferred to EC2"
        else
          echo "Warning: ENV_FILE is not set in GitHub Secrets or is empty"
          echo "Using existing .env file on server or creating from template"
          rm -f env_temp.txt
        fi
        
        # Deploy script on EC2
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'ENDSSH'
          set -e  # Exit on error
          
          echo "Starting deployment..."
          cd /home/ubuntu/smart-yoram-backend
          
          # Check if .env file exists
          if [ -f .env ]; then
            chmod 600 .env
            echo "✅ .env file found and permissions set"
            
            # Fix BACKEND_CORS_ORIGINS format if needed
            # Replace smart quotes with regular quotes using Python
            python3 -c "
import sys
with open('.env', 'r') as f:
    content = f.read()
content = content.replace('"', '\"').replace('"', '\"')
content = content.replace(''', \"'\").replace(''', \"'\")
with open('.env', 'w') as f:
    f.write(content)
print('Fixed quote formatting in .env file')
" || echo "Could not fix quotes with Python"
            
            echo "✅ Fixed quote formatting in .env file"
          else
            echo "WARNING: .env file not found!"
            echo "Please set ENV_FILE_BASE64 in GitHub Environment Variables"
            echo "Or create .env file manually on the server"
            
            # Try to use .env.example as template
            if [ -f .env.example ]; then
              echo "Creating .env from .env.example template..."
              cp .env.example .env
              chmod 600 .env
              echo "⚠️  Using template .env file - please update with actual values"
            else
              echo "ERROR: No .env file and no template found!"
              exit 1
            fi
          fi
          
          # Check if using Docker
          if [ -f "docker-compose.yml" ]; then
            echo "Docker Compose found, using Docker deployment..."
            
            # Stop existing containers
            docker-compose down || true
            
            # Build and start containers
            docker-compose up -d --build
            
            # Wait for container to be healthy
            echo "Waiting for container to start..."
            sleep 10
            
            # Check if container is running
            docker ps | grep smart-yoram-backend
            
          else
            echo "No Docker Compose found, using Python virtual environment..."
            
            # Ensure Python 3 is installed
            if ! command -v python3 &> /dev/null; then
              echo "ERROR: Python 3 is not installed!"
              echo "Install with: sudo apt update && sudo apt install python3 python3-pip python3-venv"
              exit 1
            fi
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            
            # Activate virtual environment
            source venv/bin/activate
            
            # Install/update dependencies
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Run database migrations
            echo "Running database migrations..."
            alembic upgrade head || echo "WARNING: Migration failed, continuing..."
            
            # Kill existing process if running
            pkill -f "uvicorn app.main:app" || true
            
            # Start the application in background
            echo "Starting application..."
            nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 > app.log 2>&1 &
            
            # Wait for app to start
            sleep 5
            
            # Check if process is running
            ps aux | grep "uvicorn app.main:app" | grep -v grep
          fi
          
          # Test local health check
          echo "Testing local health check..."
          curl -f http://localhost:8000/health || echo "WARNING: Local health check failed"
          
          echo "Deployment completed!"
        ENDSSH
        
        # Clean up
        rm -f private_key.pem
    
    - name: Health Check
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "Waiting for application to start..."
        
        # Setup SSH key for debugging
        echo "$PRIVATE_KEY" > private_key_health.pem
        chmod 600 private_key_health.pem
        
        # Try health check multiple times
        max_attempts=6
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts..."
          
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_HOST }}:8000/health 2>/dev/null || echo "000")
          
          if [ "$response" == "200" ]; then
            echo "✅ Application is running successfully!"
            rm -f private_key_health.pem
            exit 0
          else
            echo "Attempt $attempt failed with status code: $response"
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Health check failed after $max_attempts attempts"
              
              # SSH and check logs for debugging
              echo "Fetching application logs for debugging..."
              ssh -i private_key_health.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} 'bash -s' << 'SCRIPT_END' || true
                echo "=== Checking application status ==="
                ps aux | grep uvicorn | grep -v grep || echo "No uvicorn process found"
                
                echo "=== Last 20 lines of app.log (if exists) ==="
                [ -f /home/ubuntu/smart-yoram-backend/app.log ] && tail -20 /home/ubuntu/smart-yoram-backend/app.log || echo "No app.log found"
                
                echo "=== Docker status (if using Docker) ==="
                docker ps -a | grep smart-yoram || echo "No Docker container found"
                
                echo "=== Testing local health check ==="
                curl -v http://localhost:8000/health || echo "Local health check failed"
              SCRIPT_END
              
              rm -f private_key_health.pem
              exit 1
            fi
            
            sleep 10
            ((attempt++))
          fi
        done
        
        rm -f private_key_health.pem