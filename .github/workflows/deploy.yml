name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  EC2_HOST: 13.211.169.169
  EC2_USER: ubuntu
  DEPLOY_PATH: /home/ubuntu/smart-yoram-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key-for-ci
      run: |
        # Run pytest if tests exist
        if [ -d "tests" ]; then
          pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Check code formatting
      run: |
        # Check if black is installed and run it
        if pip show black > /dev/null 2>&1; then
          black --check app/
        else
          echo "Black not installed, skipping format check"
        fi

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Setup SSH key
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Add host to known_hosts to avoid interactive prompt
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Copy files to EC2
        rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='.env' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='venv' \
          --exclude='private_key.pem' \
          ./ ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.DEPLOY_PATH }}/
        
        # Deploy script on EC2
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/smart-yoram-backend
          
          # Activate virtual environment or create if doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          # Install/update dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Run database migrations
          alembic upgrade head
          
          # Restart the application using Docker Compose
          if [ -f "docker-compose.yml" ]; then
            docker-compose down
            docker-compose up -d --build
          else
            # If not using Docker, restart with systemd or supervisor
            # sudo systemctl restart smart-yoram-backend
            # Or restart with supervisorctl
            # supervisorctl restart smart-yoram-backend
            echo "Please configure service restart method"
          fi
          
          echo "Deployment completed successfully!"
        EOF
        
        # Clean up
        rm -f private_key.pem
    
    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Check if the application is running
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.EC2_HOST }}:8000/health || echo "000")
        
        if [ "$response" == "200" ]; then
          echo "✅ Application is running successfully!"
        else
          echo "❌ Health check failed with status code: $response"
          exit 1
        fi