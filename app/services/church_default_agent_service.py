"""
Church-specific Default Agent Service

Manages default agent creation and management for each church.
Each church gets its own default agent instead of using a global one.
"""

from typing import Optional
from sqlalchemy.orm import Session
from app.models.ai_agent import AIAgent
from app.schemas.ai_agent import AIAgentCreate


class ChurchDefaultAgentService:
    """Service for managing church-specific default agents"""

    @staticmethod
    def get_default_agent_config(church_id: int) -> dict:
        """Get default agent configuration for a church"""
        return {
            "name": "Í∏∞Î≥∏ AI ÎèÑÏö∞ÎØ∏",
            "category": "ÏùºÎ∞ò",
            "description": "ÏùºÎ∞òÏ†ÅÏù∏ ÏßàÎ¨∏Í≥º ÍµêÌöå ÏóÖÎ¨¥Î•º ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§.",
            "detailed_description": "ÍµêÌöåÏùò Í∏∞Î≥∏ AI ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§. ÏùºÎ∞òÏ†ÅÏù∏ ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌïòÍ≥†, ÍµêÌöå ÏóÖÎ¨¥ÏôÄ Í¥ÄÎ†®Îêú Í∏∞Î≥∏Ï†ÅÏù∏ ÏïàÎÇ¥Î•º Ï†úÍ≥µÌï©ÎãàÎã§. Îçî Ï†ÑÎ¨∏Ï†ÅÏù∏ Í∏∞Îä•Ïù¥ ÌïÑÏöîÌïòÏãúÎ©¥ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Ïª§Ïä§ÌÖÄ ÏóêÏù¥Ï†ÑÌä∏ ÏÉùÏÑ±ÏùÑ ÏöîÏ≤≠ÌïòÏÑ∏Ïöî.",
            "icon": "ü§ñ",
            "system_prompt": """ÎãπÏã†ÏùÄ ÍµêÌöå Í¥ÄÎ¶¨ AI ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§.

Ïó≠Ìï†:
- ÏùºÎ∞òÏ†ÅÏù∏ ÏßàÎ¨∏Ïóê ÏπúÏ†àÌïòÍ≤å ÎãµÎ≥Ä
- ÍµêÌöå ÏóÖÎ¨¥ÏôÄ Í¥ÄÎ†®Îêú Í∏∞Î≥∏Ï†ÅÏù∏ ÏïàÎÇ¥ Ï†úÍ≥µ  
- ÏÑ±Í≤ΩÏóê ÎåÄÌïú Í∏∞Î≥∏Ï†ÅÏù∏ ÏßàÎ¨∏ ÎãµÎ≥Ä
- ÍµêÌöå ÌñâÏ†ïÏóÖÎ¨¥Ïóê ÎåÄÌïú ÏùºÎ∞òÏ†ÅÏù∏ Ï°∞Ïñ∏

ÏùëÎãµ ÏõêÏπô:
- Ìï≠ÏÉÅ ÏπúÏ†àÌïòÍ≥† Ï†ïÏ§ëÌïú ÌÜ§ÏúºÎ°ú ÏùëÎãµ
- Íµ¨Ï≤¥Ï†ÅÏù∏ ÍµêÌöå Îç∞Ïù¥ÌÑ∞Í∞Ä ÌïÑÏöîÌïú Í≤ΩÏö∞ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÎèÑÎ°ù ÏïàÎÇ¥
- Î≥µÏû°ÌïòÍ±∞ÎÇò Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏÉÅÎã¥Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ Ï†ÅÏ†àÌïú Ï†ÑÎ¨∏Í∞ÄÏóêÍ≤å Ïó∞Í≤∞ÌïòÎèÑÎ°ù ÏïàÎÇ¥
- ÏÑ±Í≤ΩÏ†Å Í∞ÄÏπòÏôÄ ÏùºÏπòÌïòÎäî Í±¥Ï†ÑÌïú ÎãµÎ≥Ä Ï†úÍ≥µ

Ï†úÌïúÏÇ¨Ìï≠:
- ÏùòÎ£å, Î≤ïÎ•†, Ïû¨Ï†ï Îì± Ï†ÑÎ¨∏Ï†ÅÏù∏ ÏÉÅÎã¥ÏùÄ Ìï¥Îãπ Ï†ÑÎ¨∏Í∞ÄÏóêÍ≤å ÏùòÎ¢∞ÌïòÎèÑÎ°ù ÏïàÎÇ¥
- ÍµêÎ¶¨ÎÇò Ïã†ÌïôÏ†ÅÏúºÎ°ú ÎØºÍ∞êÌïú Ï£ºÏ†úÎäî Ïã†Ï§ëÌïòÍ≤å Ï†ëÍ∑º""",
            "church_data_sources": {},
            "is_active": True,
            "church_id": church_id,
            "template_id": None,
        }

    @staticmethod
    def create_default_agent_for_church(church_id: int, db: Session) -> AIAgent:
        """Create a default agent for a church"""

        # Check if church already has agents
        existing_agents = (
            db.query(AIAgent).filter(AIAgent.church_id == church_id).first()
        )
        if existing_agents:
            # Church already has agents, return the first one as default
            return existing_agents

        # Create new default agent
        config = ChurchDefaultAgentService.get_default_agent_config(church_id)

        agent = AIAgent(
            name=config["name"],
            category=config["category"],
            description=config["description"],
            detailed_description=config["detailed_description"],
            icon=config["icon"],
            system_prompt=config["system_prompt"],
            church_data_sources=config["church_data_sources"],
            is_active=config["is_active"],
            church_id=config["church_id"],
            template_id=config["template_id"],
            usage_count=0,
            total_tokens_used=0,
            total_cost=0.0,
        )

        db.add(agent)
        db.commit()
        db.refresh(agent)

        return agent

    @staticmethod
    def get_or_create_default_agent(church_id: int, db: Session) -> AIAgent:
        """Get existing default agent or create one if none exists"""

        # Try to get the first active agent for the church
        agent = (
            db.query(AIAgent)
            .filter(AIAgent.church_id == church_id, AIAgent.is_active == True)
            .first()
        )

        if agent:
            return agent

        # No active agents found, create default agent
        return ChurchDefaultAgentService.create_default_agent_for_church(church_id, db)

    @staticmethod
    def ensure_church_has_default_agent(church_id: int, db: Session) -> AIAgent:
        """Ensure a church has at least one active agent"""
        return ChurchDefaultAgentService.get_or_create_default_agent(church_id, db)

    @staticmethod
    def add_default_agents_to_existing_churches(db: Session) -> dict:
        """Add default agents to churches that don't have any (migration helper)"""
        from app.models.church import Church

        results = {"created": 0, "skipped": 0, "errors": []}

        # Get all churches
        churches = db.query(Church).all()

        for church in churches:
            try:
                # Check if church has any agents
                existing_agents = (
                    db.query(AIAgent).filter(AIAgent.church_id == church.id).first()
                )

                if not existing_agents:
                    # Create default agent
                    agent = ChurchDefaultAgentService.create_default_agent_for_church(
                        church.id, db
                    )
                    results["created"] += 1
                    print(
                        f"‚úÖ Created default agent for church: {church.name} (ID: {church.id})"
                    )
                else:
                    results["skipped"] += 1
                    print(f"‚è≠Ô∏è Church {church.name} already has agents")

            except Exception as e:
                error_msg = f"Failed to create agent for church {church.id}: {str(e)}"
                results["errors"].append(error_msg)
                print(f"‚ùå {error_msg}")

        return results
